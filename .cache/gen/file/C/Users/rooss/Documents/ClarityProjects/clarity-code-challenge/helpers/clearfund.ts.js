import { types } from 'https://deno.land/x/clarinet@v1.0.6/index.ts';
import { readOnlyCall, transactionCall } from './base.ts';
const launchData = {
    title: types.utf8("ClearFund Campaign"),
    description: types.buff("Crowdfunding"),
    link: types.utf8("https://launch.campaign"),
    fundGoal: types.uint(20000),
    startsAt: types.uint(10),
    endsAt: types.uint(50)
};
let launchArguments = [
    launchData.title,
    launchData.description,
    launchData.link,
    launchData.fundGoal,
    launchData.startsAt,
    launchData.endsAt
];
const pledgeData = {
    campaignId: types.uint(1),
    amount: types.uint(1000)
};
const unpledgeData = {
    campaignId: types.uint(1),
    amount: types.uint(500)
};
// launch functions
export function launch(sender) {
    return transactionCall(sender, "clearfund", "launch", launchArguments);
}
// pledge functions
export function pledge(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        pledgeData.amount
    ]);
}
export function pledgeAmountEmpty(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(0)
    ]);
}
export function pledgeAmountLessThan500(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(499)
    ]);
}
export function pledgeAmountGreaterThanGoal(sender) {
    return transactionCall(sender, "clearfund", "pledge", [
        pledgeData.campaignId,
        types.uint(20000)
    ]);
}
// unpledge functions
export function unpledge(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        unpledgeData.amount
    ]);
}
export function unpledgeAll(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        pledgeData.amount
    ]);
}
export function unpledgeMoreThanPledged(sender) {
    return transactionCall(sender, "clearfund", "unpledge", [
        unpledgeData.campaignId,
        types.uint(1200)
    ]);
}
// refund functions
export function refund(sender) {
    return transactionCall(sender, "clearfund", "refund", [
        unpledgeData.campaignId
    ]);
}
// read-only functions
export function getCampaign(chain, sender) {
    return readOnlyCall(chain, sender, "clearfund", "get-campaign", [
        pledgeData.campaignId
    ]);
}
export function getInvestment(chain, sender) {
    return readOnlyCall(chain, sender, "clearfund", "get-investment", [
        pledgeData.campaignId,
        types.principal(sender)
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovVXNlcnMvcm9vc3MvRG9jdW1lbnRzL0NsYXJpdHlQcm9qZWN0cy9jbGFyaXR5LWNvZGUtY2hhbGxlbmdlL2hlbHBlcnMvY2xlYXJmdW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluLCB0eXBlcyB9IGZyb20gJ2h0dHBzOi8vZGVuby5sYW5kL3gvY2xhcmluZXRAdjEuMC42L2luZGV4LnRzJztcbmltcG9ydCB7IHJlYWRPbmx5Q2FsbCwgdHJhbnNhY3Rpb25DYWxsIH0gZnJvbSAnLi9iYXNlLnRzJ1xuXG5jb25zdCBsYXVuY2hEYXRhID0ge1xuICAgIHRpdGxlOiB0eXBlcy51dGY4KFwiQ2xlYXJGdW5kIENhbXBhaWduXCIpLFxuICAgIGRlc2NyaXB0aW9uOiB0eXBlcy5idWZmKFwiQ3Jvd2RmdW5kaW5nXCIpLFxuICAgIGxpbms6IHR5cGVzLnV0ZjgoXCJodHRwczovL2xhdW5jaC5jYW1wYWlnblwiKSxcbiAgICBmdW5kR29hbDogdHlwZXMudWludCgyMDAwMCksXG4gICAgc3RhcnRzQXQ6IHR5cGVzLnVpbnQoMTApLFxuICAgIGVuZHNBdDogdHlwZXMudWludCg1MClcbn1cblxubGV0IGxhdW5jaEFyZ3VtZW50cyA9IFtcbiAgICBsYXVuY2hEYXRhLnRpdGxlLFxuICAgIGxhdW5jaERhdGEuZGVzY3JpcHRpb24sXG4gICAgbGF1bmNoRGF0YS5saW5rLFxuICAgIGxhdW5jaERhdGEuZnVuZEdvYWwsXG4gICAgbGF1bmNoRGF0YS5zdGFydHNBdCxcbiAgICBsYXVuY2hEYXRhLmVuZHNBdFxuXVxuXG5jb25zdCBwbGVkZ2VEYXRhID0ge1xuICAgIGNhbXBhaWduSWQ6IHR5cGVzLnVpbnQoMSksXG4gICAgYW1vdW50OiB0eXBlcy51aW50KDEwMDApXG59XG5cbmNvbnN0IHVucGxlZGdlRGF0YSA9IHtcbiAgICBjYW1wYWlnbklkOiB0eXBlcy51aW50KDEpLFxuICAgIGFtb3VudDogdHlwZXMudWludCg1MDApXG59XG5cbi8vIGxhdW5jaCBmdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBsYXVuY2goc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJsYXVuY2hcIiwgbGF1bmNoQXJndW1lbnRzKVxufVxuXG4vLyBwbGVkZ2UgZnVuY3Rpb25zXG5leHBvcnQgZnVuY3Rpb24gcGxlZGdlKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwicGxlZGdlXCIsIFtwbGVkZ2VEYXRhLmNhbXBhaWduSWQsIHBsZWRnZURhdGEuYW1vdW50XSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsZWRnZUFtb3VudEVtcHR5KHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwicGxlZGdlXCIsIFtwbGVkZ2VEYXRhLmNhbXBhaWduSWQsIHR5cGVzLnVpbnQoMCldKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGxlZGdlQW1vdW50TGVzc1RoYW41MDAoc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJwbGVkZ2VcIiwgW3BsZWRnZURhdGEuY2FtcGFpZ25JZCwgdHlwZXMudWludCg0OTkpXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsZWRnZUFtb3VudEdyZWF0ZXJUaGFuR29hbChzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInBsZWRnZVwiLCBbcGxlZGdlRGF0YS5jYW1wYWlnbklkLCB0eXBlcy51aW50KDIwMDAwKV0pXG59XG5cbi8vIHVucGxlZGdlIGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIHVucGxlZGdlKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwidW5wbGVkZ2VcIiwgW3VucGxlZGdlRGF0YS5jYW1wYWlnbklkLCB1bnBsZWRnZURhdGEuYW1vdW50XSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVucGxlZGdlQWxsKHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwidW5wbGVkZ2VcIiwgW3VucGxlZGdlRGF0YS5jYW1wYWlnbklkLCBwbGVkZ2VEYXRhLmFtb3VudF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnBsZWRnZU1vcmVUaGFuUGxlZGdlZChzZW5kZXI6IHN0cmluZykge1xuICAgIHJldHVybiB0cmFuc2FjdGlvbkNhbGwoc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcInVucGxlZGdlXCIsIFt1bnBsZWRnZURhdGEuY2FtcGFpZ25JZCwgdHlwZXMudWludCgxMjAwKV0pXG59XG5cbi8vIHJlZnVuZCBmdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiByZWZ1bmQoc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJjbGVhcmZ1bmRcIiwgXCJyZWZ1bmRcIiwgW3VucGxlZGdlRGF0YS5jYW1wYWlnbklkXSlcbn1cblxuLy8gcmVhZC1vbmx5IGZ1bmN0aW9uc1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhbXBhaWduKGNoYWluOiBDaGFpbiwgc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVhZE9ubHlDYWxsKGNoYWluLCBzZW5kZXIsIFwiY2xlYXJmdW5kXCIsIFwiZ2V0LWNhbXBhaWduXCIsIFtwbGVkZ2VEYXRhLmNhbXBhaWduSWRdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW52ZXN0bWVudChjaGFpbjogQ2hhaW4sIHNlbmRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlYWRPbmx5Q2FsbChjaGFpbiwgc2VuZGVyLCBcImNsZWFyZnVuZFwiLCBcImdldC1pbnZlc3RtZW50XCIsIFtwbGVkZ2VEYXRhLmNhbXBhaWduSWQsIHR5cGVzLnByaW5jaXBhbChzZW5kZXIpXSlcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFnQixLQUFLLFFBQVEsOENBQThDLENBQUM7QUFDNUUsU0FBUyxZQUFZLEVBQUUsZUFBZSxRQUFRLFdBQVcsQ0FBQTtBQUV6RCxNQUFNLFVBQVUsR0FBRztJQUNmLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDO0lBQ3ZDLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUN2QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUMzQyxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDM0IsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ3hCLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztDQUN6QjtBQUVELElBQUksZUFBZSxHQUFHO0lBQ2xCLFVBQVUsQ0FBQyxLQUFLO0lBQ2hCLFVBQVUsQ0FBQyxXQUFXO0lBQ3RCLFVBQVUsQ0FBQyxJQUFJO0lBQ2YsVUFBVSxDQUFDLFFBQVE7SUFDbkIsVUFBVSxDQUFDLFFBQVE7SUFDbkIsVUFBVSxDQUFDLE1BQU07Q0FDcEI7QUFFRCxNQUFNLFVBQVUsR0FBRztJQUNmLFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN6QixNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Q0FDM0I7QUFFRCxNQUFNLFlBQVksR0FBRztJQUNqQixVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekIsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQzFCO0FBRUQsbUJBQW1CO0FBQ25C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