import { types } from 'https://deno.land/x/clarinet@v1.0.6/index.ts';
import { readOnlyCall, transactionCall } from './base.ts';
export function getLastTokenId(chain, sender) {
    return readOnlyCall(chain, sender, "donorpass", "get-last-token-id");
}
export function getOwner(chain, sender, nftId) {
    return readOnlyCall(chain, sender, "donorpass", "get-owner", [
        types.uint(nftId)
    ]);
}
export function getTokenUri(chain, sender, nftId) {
    return readOnlyCall(chain, sender, "donorpass", "get-token-uri", [
        types.uint(nftId)
    ]);
}
export function mint(sender, minter) {
    return transactionCall(sender, "donorpass", "mint", [
        types.principal(minter)
    ]);
}
export function transfer(sender, receiver, nftId) {
    return transactionCall(sender, "donorpass", "transfer", [
        types.uint(nftId),
        types.principal(sender),
        types.principal(receiver)
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vQzovVXNlcnMvcm9vc3MvRG9jdW1lbnRzL0NsYXJpdHlQcm9qZWN0cy9jbGFyaXR5LWNvZGUtY2hhbGxlbmdlL2hlbHBlcnMvZG9ub3JwYXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWluLCBUeCwgdHlwZXMgfSBmcm9tICdodHRwczovL2Rlbm8ubGFuZC94L2NsYXJpbmV0QHYxLjAuNi9pbmRleC50cyc7XG5pbXBvcnQgeyByZWFkT25seUNhbGwsIHRyYW5zYWN0aW9uQ2FsbCB9IGZyb20gJy4vYmFzZS50cydcblxuZXhwb3J0IGZ1bmN0aW9uIGdldExhc3RUb2tlbklkKGNoYWluOiBDaGFpbiwgc2VuZGVyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVhZE9ubHlDYWxsKGNoYWluLCBzZW5kZXIsIFwiZG9ub3JwYXNzXCIsIFwiZ2V0LWxhc3QtdG9rZW4taWRcIilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE93bmVyKGNoYWluOiBDaGFpbiwgc2VuZGVyOiBzdHJpbmcsIG5mdElkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gcmVhZE9ubHlDYWxsKGNoYWluLCBzZW5kZXIsIFwiZG9ub3JwYXNzXCIsIFwiZ2V0LW93bmVyXCIsIFt0eXBlcy51aW50KG5mdElkKV0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlblVyaShjaGFpbjogQ2hhaW4sIHNlbmRlcjogc3RyaW5nLCBuZnRJZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHJlYWRPbmx5Q2FsbChjaGFpbiwgc2VuZGVyLCBcImRvbm9ycGFzc1wiLCBcImdldC10b2tlbi11cmlcIiwgW3R5cGVzLnVpbnQobmZ0SWQpXSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbnQoc2VuZGVyOiBzdHJpbmcsIG1pbnRlcjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uQ2FsbChzZW5kZXIsIFwiZG9ub3JwYXNzXCIsIFwibWludFwiLCBbdHlwZXMucHJpbmNpcGFsKG1pbnRlcildKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmZXIoc2VuZGVyOiBzdHJpbmcsIHJlY2VpdmVyOiBzdHJpbmcsIG5mdElkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25DYWxsKHNlbmRlciwgXCJkb25vcnBhc3NcIiwgXCJ0cmFuc2ZlclwiLCBbdHlwZXMudWludChuZnRJZCksIHR5cGVzLnByaW5jaXBhbChzZW5kZXIpLCB0eXBlcy5wcmluY2lwYWwocmVjZWl2ZXIpXSlcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFvQixLQUFLLFFBQVEsOENBQThDLENBQUM7QUFDaEYsU0FBUyxZQUFZLEVBQUUsZUFBZSxRQUFRLFdBQVcsQ0FBQTtBQUV6RCxPQUFPLFNBQVMsY0FBYyxDQUFDLEtBQVksRUFBRSxNQUFjLEVBQUU7SUFDekQsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtDQUN2RTtBQUVELE9BQU8sU0FBUyxRQUFRLENBQUMsS0FBWSxFQUFFLE1BQWMsRUFBRSxLQUFhLEVBQUU7SUFDbEUsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFO1FBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7S0FBQyxDQUFDLENBQUE7Q0FDcEY7QUFFRCxPQUFPLFNBQVMsV0FBVyxDQUFDLEtBQVksRUFBRSxNQUFjLEVBQUUsS0FBYSxFQUFFO0lBQ3JFLE9BQU8sWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRTtRQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0tBQUMsQ0FBQyxDQUFBO0NBQ3hGO0FBRUQsT0FBTyxTQUFTLElBQUksQ0FBQyxNQUFjLEVBQUUsTUFBYyxFQUFFO0lBQ2pELE9BQU8sZUFBZSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFO1FBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7S0FBQyxDQUFDLENBQUE7Q0FDakY7QUFFRCxPQUFPLFNBQVMsUUFBUSxDQUFDLE1BQWMsRUFBRSxRQUFnQixFQUFFLEtBQWEsRUFBRTtJQUN0RSxPQUFPLGVBQWUsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRTtRQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztLQUFDLENBQUMsQ0FBQTtDQUNuSSJ9